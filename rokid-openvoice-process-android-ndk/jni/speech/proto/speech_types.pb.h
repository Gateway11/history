// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: speech_types.proto

#ifndef PROTOBUF_speech_5ftypes_2eproto__INCLUDED
#define PROTOBUF_speech_5ftypes_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace rokid {
namespace open {
namespace speech {
namespace v1 {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_speech_5ftypes_2eproto();
void protobuf_AssignDesc_speech_5ftypes_2eproto();
void protobuf_ShutdownFile_speech_5ftypes_2eproto();

class PingPayload;

enum SpeechErrorCode {
  SUCCESS = 0,
  UNAUTHENTICATED = 2,
  CONNECTION_EXCEED = 3,
  RESOURCE_EXHASTED = 4,
  BUSY = 5,
  INTERNAL = 6,
  VAD_TIMEOUT = 7
};
bool SpeechErrorCode_IsValid(int value);
const SpeechErrorCode SpeechErrorCode_MIN = SUCCESS;
const SpeechErrorCode SpeechErrorCode_MAX = VAD_TIMEOUT;
const int SpeechErrorCode_ARRAYSIZE = SpeechErrorCode_MAX + 1;

const ::google::protobuf::EnumDescriptor* SpeechErrorCode_descriptor();
inline const ::std::string& SpeechErrorCode_Name(SpeechErrorCode value) {
  return ::google::protobuf::internal::NameOfEnum(
    SpeechErrorCode_descriptor(), value);
}
inline bool SpeechErrorCode_Parse(
    const ::std::string& name, SpeechErrorCode* value) {
  return ::google::protobuf::internal::ParseNamedEnum<SpeechErrorCode>(
    SpeechErrorCode_descriptor(), name, value);
}
enum ReqType {
  START = 0,
  VOICE = 1,
  END = 2,
  TEXT = 3
};
bool ReqType_IsValid(int value);
const ReqType ReqType_MIN = START;
const ReqType ReqType_MAX = TEXT;
const int ReqType_ARRAYSIZE = ReqType_MAX + 1;

const ::google::protobuf::EnumDescriptor* ReqType_descriptor();
inline const ::std::string& ReqType_Name(ReqType value) {
  return ::google::protobuf::internal::NameOfEnum(
    ReqType_descriptor(), value);
}
inline bool ReqType_Parse(
    const ::std::string& name, ReqType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ReqType>(
    ReqType_descriptor(), name, value);
}
enum Codec {
  PCM = 0,
  OPU = 1,
  OPU2 = 2
};
bool Codec_IsValid(int value);
const Codec Codec_MIN = PCM;
const Codec Codec_MAX = OPU2;
const int Codec_ARRAYSIZE = Codec_MAX + 1;

const ::google::protobuf::EnumDescriptor* Codec_descriptor();
inline const ::std::string& Codec_Name(Codec value) {
  return ::google::protobuf::internal::NameOfEnum(
    Codec_descriptor(), value);
}
inline bool Codec_Parse(
    const ::std::string& name, Codec* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Codec>(
    Codec_descriptor(), name, value);
}
// ===================================================================

class PingPayload : public ::google::protobuf::Message {
 public:
  PingPayload();
  virtual ~PingPayload();

  PingPayload(const PingPayload& from);

  inline PingPayload& operator=(const PingPayload& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PingPayload& default_instance();

  void Swap(PingPayload* other);

  // implements Message ----------------------------------------------

  PingPayload* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PingPayload& from);
  void MergeFrom(const PingPayload& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 req_id = 1;
  inline bool has_req_id() const;
  inline void clear_req_id();
  static const int kReqIdFieldNumber = 1;
  inline ::google::protobuf::int32 req_id() const;
  inline void set_req_id(::google::protobuf::int32 value);

  // required uint64 now_tp = 2;
  inline bool has_now_tp() const;
  inline void clear_now_tp();
  static const int kNowTpFieldNumber = 2;
  inline ::google::protobuf::uint64 now_tp() const;
  inline void set_now_tp(::google::protobuf::uint64 value);

  // required uint64 req_tp = 3;
  inline bool has_req_tp() const;
  inline void clear_req_tp();
  static const int kReqTpFieldNumber = 3;
  inline ::google::protobuf::uint64 req_tp() const;
  inline void set_req_tp(::google::protobuf::uint64 value);

  // required uint64 resp_tp = 4;
  inline bool has_resp_tp() const;
  inline void clear_resp_tp();
  static const int kRespTpFieldNumber = 4;
  inline ::google::protobuf::uint64 resp_tp() const;
  inline void set_resp_tp(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:rokid.open.speech.v1.PingPayload)
 private:
  inline void set_has_req_id();
  inline void clear_has_req_id();
  inline void set_has_now_tp();
  inline void clear_has_now_tp();
  inline void set_has_req_tp();
  inline void clear_has_req_tp();
  inline void set_has_resp_tp();
  inline void clear_has_resp_tp();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint64 now_tp_;
  ::google::protobuf::uint64 req_tp_;
  ::google::protobuf::uint64 resp_tp_;
  ::google::protobuf::int32 req_id_;
  friend void  protobuf_AddDesc_speech_5ftypes_2eproto();
  friend void protobuf_AssignDesc_speech_5ftypes_2eproto();
  friend void protobuf_ShutdownFile_speech_5ftypes_2eproto();

  void InitAsDefaultInstance();
  static PingPayload* default_instance_;
};
// ===================================================================


// ===================================================================

// PingPayload

// required int32 req_id = 1;
inline bool PingPayload::has_req_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PingPayload::set_has_req_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PingPayload::clear_has_req_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PingPayload::clear_req_id() {
  req_id_ = 0;
  clear_has_req_id();
}
inline ::google::protobuf::int32 PingPayload::req_id() const {
  // @@protoc_insertion_point(field_get:rokid.open.speech.v1.PingPayload.req_id)
  return req_id_;
}
inline void PingPayload::set_req_id(::google::protobuf::int32 value) {
  set_has_req_id();
  req_id_ = value;
  // @@protoc_insertion_point(field_set:rokid.open.speech.v1.PingPayload.req_id)
}

// required uint64 now_tp = 2;
inline bool PingPayload::has_now_tp() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PingPayload::set_has_now_tp() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PingPayload::clear_has_now_tp() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PingPayload::clear_now_tp() {
  now_tp_ = GOOGLE_ULONGLONG(0);
  clear_has_now_tp();
}
inline ::google::protobuf::uint64 PingPayload::now_tp() const {
  // @@protoc_insertion_point(field_get:rokid.open.speech.v1.PingPayload.now_tp)
  return now_tp_;
}
inline void PingPayload::set_now_tp(::google::protobuf::uint64 value) {
  set_has_now_tp();
  now_tp_ = value;
  // @@protoc_insertion_point(field_set:rokid.open.speech.v1.PingPayload.now_tp)
}

// required uint64 req_tp = 3;
inline bool PingPayload::has_req_tp() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void PingPayload::set_has_req_tp() {
  _has_bits_[0] |= 0x00000004u;
}
inline void PingPayload::clear_has_req_tp() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void PingPayload::clear_req_tp() {
  req_tp_ = GOOGLE_ULONGLONG(0);
  clear_has_req_tp();
}
inline ::google::protobuf::uint64 PingPayload::req_tp() const {
  // @@protoc_insertion_point(field_get:rokid.open.speech.v1.PingPayload.req_tp)
  return req_tp_;
}
inline void PingPayload::set_req_tp(::google::protobuf::uint64 value) {
  set_has_req_tp();
  req_tp_ = value;
  // @@protoc_insertion_point(field_set:rokid.open.speech.v1.PingPayload.req_tp)
}

// required uint64 resp_tp = 4;
inline bool PingPayload::has_resp_tp() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void PingPayload::set_has_resp_tp() {
  _has_bits_[0] |= 0x00000008u;
}
inline void PingPayload::clear_has_resp_tp() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void PingPayload::clear_resp_tp() {
  resp_tp_ = GOOGLE_ULONGLONG(0);
  clear_has_resp_tp();
}
inline ::google::protobuf::uint64 PingPayload::resp_tp() const {
  // @@protoc_insertion_point(field_get:rokid.open.speech.v1.PingPayload.resp_tp)
  return resp_tp_;
}
inline void PingPayload::set_resp_tp(::google::protobuf::uint64 value) {
  set_has_resp_tp();
  resp_tp_ = value;
  // @@protoc_insertion_point(field_set:rokid.open.speech.v1.PingPayload.resp_tp)
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace v1
}  // namespace speech
}  // namespace open
}  // namespace rokid

#ifndef SWIG
namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::rokid::open::speech::v1::SpeechErrorCode> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::rokid::open::speech::v1::SpeechErrorCode>() {
  return ::rokid::open::speech::v1::SpeechErrorCode_descriptor();
}
template <> struct is_proto_enum< ::rokid::open::speech::v1::ReqType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::rokid::open::speech::v1::ReqType>() {
  return ::rokid::open::speech::v1::ReqType_descriptor();
}
template <> struct is_proto_enum< ::rokid::open::speech::v1::Codec> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::rokid::open::speech::v1::Codec>() {
  return ::rokid::open::speech::v1::Codec_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_speech_5ftypes_2eproto__INCLUDED
