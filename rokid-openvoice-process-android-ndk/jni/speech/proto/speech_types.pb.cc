// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: speech_types.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "speech_types.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace rokid {
namespace open {
namespace speech {
namespace v1 {

namespace {

const ::google::protobuf::Descriptor* PingPayload_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PingPayload_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* SpeechErrorCode_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* ReqType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* Codec_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_speech_5ftypes_2eproto() {
  protobuf_AddDesc_speech_5ftypes_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "speech_types.proto");
  GOOGLE_CHECK(file != NULL);
  PingPayload_descriptor_ = file->message_type(0);
  static const int PingPayload_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PingPayload, req_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PingPayload, now_tp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PingPayload, req_tp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PingPayload, resp_tp_),
  };
  PingPayload_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PingPayload_descriptor_,
      PingPayload::default_instance_,
      PingPayload_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PingPayload, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PingPayload, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PingPayload));
  SpeechErrorCode_descriptor_ = file->enum_type(0);
  ReqType_descriptor_ = file->enum_type(1);
  Codec_descriptor_ = file->enum_type(2);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_speech_5ftypes_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PingPayload_descriptor_, &PingPayload::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_speech_5ftypes_2eproto() {
  delete PingPayload::default_instance_;
  delete PingPayload_reflection_;
}

void protobuf_AddDesc_speech_5ftypes_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\022speech_types.proto\022\024rokid.open.speech."
    "v1\"N\n\013PingPayload\022\016\n\006req_id\030\001 \002(\005\022\016\n\006now"
    "_tp\030\002 \002(\004\022\016\n\006req_tp\030\003 \002(\004\022\017\n\007resp_tp\030\004 \002"
    "(\004*\212\001\n\017SpeechErrorCode\022\013\n\007SUCCESS\020\000\022\023\n\017U"
    "NAUTHENTICATED\020\002\022\025\n\021CONNECTION_EXCEED\020\003\022"
    "\025\n\021RESOURCE_EXHASTED\020\004\022\010\n\004BUSY\020\005\022\014\n\010INTE"
    "RNAL\020\006\022\017\n\013VAD_TIMEOUT\020\007*2\n\007ReqType\022\t\n\005ST"
    "ART\020\000\022\t\n\005VOICE\020\001\022\007\n\003END\020\002\022\010\n\004TEXT\020\003*#\n\005C"
    "odec\022\007\n\003PCM\020\000\022\007\n\003OPU\020\001\022\010\n\004OPU2\020\002", 352);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "speech_types.proto", &protobuf_RegisterTypes);
  PingPayload::default_instance_ = new PingPayload();
  PingPayload::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_speech_5ftypes_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_speech_5ftypes_2eproto {
  StaticDescriptorInitializer_speech_5ftypes_2eproto() {
    protobuf_AddDesc_speech_5ftypes_2eproto();
  }
} static_descriptor_initializer_speech_5ftypes_2eproto_;
const ::google::protobuf::EnumDescriptor* SpeechErrorCode_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SpeechErrorCode_descriptor_;
}
bool SpeechErrorCode_IsValid(int value) {
  switch(value) {
    case 0:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* ReqType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReqType_descriptor_;
}
bool ReqType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* Codec_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Codec_descriptor_;
}
bool Codec_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#ifndef _MSC_VER
const int PingPayload::kReqIdFieldNumber;
const int PingPayload::kNowTpFieldNumber;
const int PingPayload::kReqTpFieldNumber;
const int PingPayload::kRespTpFieldNumber;
#endif  // !_MSC_VER

PingPayload::PingPayload()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:rokid.open.speech.v1.PingPayload)
}

void PingPayload::InitAsDefaultInstance() {
}

PingPayload::PingPayload(const PingPayload& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:rokid.open.speech.v1.PingPayload)
}

void PingPayload::SharedCtor() {
  _cached_size_ = 0;
  req_id_ = 0;
  now_tp_ = GOOGLE_ULONGLONG(0);
  req_tp_ = GOOGLE_ULONGLONG(0);
  resp_tp_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PingPayload::~PingPayload() {
  // @@protoc_insertion_point(destructor:rokid.open.speech.v1.PingPayload)
  SharedDtor();
}

void PingPayload::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PingPayload::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PingPayload::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PingPayload_descriptor_;
}

const PingPayload& PingPayload::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_speech_5ftypes_2eproto();
  return *default_instance_;
}

PingPayload* PingPayload::default_instance_ = NULL;

PingPayload* PingPayload::New() const {
  return new PingPayload;
}

void PingPayload::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<PingPayload*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(now_tp_, req_id_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PingPayload::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:rokid.open.speech.v1.PingPayload)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 req_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &req_id_)));
          set_has_req_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_now_tp;
        break;
      }

      // required uint64 now_tp = 2;
      case 2: {
        if (tag == 16) {
         parse_now_tp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &now_tp_)));
          set_has_now_tp();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_req_tp;
        break;
      }

      // required uint64 req_tp = 3;
      case 3: {
        if (tag == 24) {
         parse_req_tp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &req_tp_)));
          set_has_req_tp();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_resp_tp;
        break;
      }

      // required uint64 resp_tp = 4;
      case 4: {
        if (tag == 32) {
         parse_resp_tp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &resp_tp_)));
          set_has_resp_tp();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:rokid.open.speech.v1.PingPayload)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:rokid.open.speech.v1.PingPayload)
  return false;
#undef DO_
}

void PingPayload::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:rokid.open.speech.v1.PingPayload)
  // required int32 req_id = 1;
  if (has_req_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->req_id(), output);
  }

  // required uint64 now_tp = 2;
  if (has_now_tp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->now_tp(), output);
  }

  // required uint64 req_tp = 3;
  if (has_req_tp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->req_tp(), output);
  }

  // required uint64 resp_tp = 4;
  if (has_resp_tp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->resp_tp(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:rokid.open.speech.v1.PingPayload)
}

::google::protobuf::uint8* PingPayload::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:rokid.open.speech.v1.PingPayload)
  // required int32 req_id = 1;
  if (has_req_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->req_id(), target);
  }

  // required uint64 now_tp = 2;
  if (has_now_tp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->now_tp(), target);
  }

  // required uint64 req_tp = 3;
  if (has_req_tp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->req_tp(), target);
  }

  // required uint64 resp_tp = 4;
  if (has_resp_tp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->resp_tp(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:rokid.open.speech.v1.PingPayload)
  return target;
}

int PingPayload::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 req_id = 1;
    if (has_req_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->req_id());
    }

    // required uint64 now_tp = 2;
    if (has_now_tp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->now_tp());
    }

    // required uint64 req_tp = 3;
    if (has_req_tp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->req_tp());
    }

    // required uint64 resp_tp = 4;
    if (has_resp_tp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->resp_tp());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PingPayload::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PingPayload* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PingPayload*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PingPayload::MergeFrom(const PingPayload& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_req_id()) {
      set_req_id(from.req_id());
    }
    if (from.has_now_tp()) {
      set_now_tp(from.now_tp());
    }
    if (from.has_req_tp()) {
      set_req_tp(from.req_tp());
    }
    if (from.has_resp_tp()) {
      set_resp_tp(from.resp_tp());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PingPayload::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PingPayload::CopyFrom(const PingPayload& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PingPayload::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void PingPayload::Swap(PingPayload* other) {
  if (other != this) {
    std::swap(req_id_, other->req_id_);
    std::swap(now_tp_, other->now_tp_);
    std::swap(req_tp_, other->req_tp_);
    std::swap(resp_tp_, other->resp_tp_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PingPayload::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PingPayload_descriptor_;
  metadata.reflection = PingPayload_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace v1
}  // namespace speech
}  // namespace open
}  // namespace rokid

// @@protoc_insertion_point(global_scope)
