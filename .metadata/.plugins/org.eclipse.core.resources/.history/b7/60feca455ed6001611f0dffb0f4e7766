package com.android.logger;

import java.io.IOException;
import java.io.InputStream;
import java.util.Set;

import org.xmlpull.v1.XmlPullParser;
import org.xmlpull.v1.XmlPullParserException;

import android.app.Service;
import android.content.Context;
import android.content.Intent;
import android.content.res.AssetManager;
import android.os.IBinder;
import android.util.ArrayMap;
import android.util.Log;
import android.util.Xml;

/*
 * am startservice -n com.android.logger/com.android.logger.LoggerService 
 * setprop persist.sys.kernel.log logcat
 * adb shell dmesg > ldmesg_kernel.log
 * android.os.Process.killProcess(android.os.Process.myPid());
 */
public class LoggerService extends Service {

	private final String TAG = "LoggerService";
	private final String DESCRIPTOR = "com.android.logger.LoggerService";

	public final static int TRANSACTION_OPEN = IBinder.FIRST_CALL_TRANSACTION;
	public final static int TRANSACTION_CLOSE = IBinder.FIRST_CALL_TRANSACTION + 1;
	public final static int TRANSACTION_DELETE = IBinder.FIRST_CALL_TRANSACTION + 2;

	@Override
	public void onCreate() {
		super.onCreate();
//		load();
		Context context = getApplicationContext();
		int number =0b11011111;
		char a = 'a';
		a &= number;
		LoggerExts.asInstance().init(getApplicationContext());
		LoggerExts.asInstance().openLogger(-1);
	}
	
	private void loadDependency(XmlPullParser parser, String token) throws XmlPullParserException, IOException{
			if(parser.nextTag()== XmlPullParser.START_TAG
			        && "dep".equals(parser.getName())){
				Log.e(TAG, parser.nextText());
//            _serviceLauncher.addDependency(token,parser.nextText());
			    loadDependency(parser,token);
			}
    }

	private void load() {
		Log.e(TAG, "load");
		InputStream in = null;
		AssetManager assets = getAssets();
		XmlPullParser parser = Xml.newPullParser();
	    try{
	    	in = assets.open("RKServiceManifest.xml");
	    	parser.setInput(in, "utf-8");
	    	int type = parser.getEventType();
            while(type != XmlPullParser.END_DOCUMENT){
                if(type == XmlPullParser.START_TAG){
                    if("app".equals(parser.getName())){
                    	String pkg = parser.getAttributeValue(0);
                    	String cls = parser.getAttributeValue(1);
                    	String token = parser.getAttributeValue(2);
//                        _serviceLauncher.addService(token,genIntent(pkg,cls),Context.BIND_AUTO_CREATE);
                    	boolean isNextTag = parser.nextTag() == XmlPullParser.START_TAG;
                        if(isNextTag
                                && "deps".equals(parser.getName())){
                        	loadDependency(parser,token);
                        }else {
							Log.e(TAG, isNextTag+"=================="+parser.getName());
						}  
                        Log.e(TAG, pkg+"\n"+cls+"\n"+token+"\n\n");
                    }   
                }   
                type = parser.next();
            }  
	    }catch(XmlPullParserException|IOException e){
	    	e.printStackTrace();
	    }finally{
	    	if(in != null){
	    		try {
					in.close();
				} catch (IOException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
	    	}
	    	ArrayMap<String,String> arrayMap = new ArrayMap<>();
	    	arrayMap.clear();
	    	Set<String> keySet = arrayMap.keySet();
	    }
//      DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();
//      try{
//          DocumentBuilder documentBuilder = factory.newDocumentBuilder();
//          Document parse = documentBuilder.parse(stream);
//          Element root = parse.getDocumentElement();
//          NodeList childNodes = root.getChildNodes();
//          for(int i = 0; i <  childNodes.getLength(); i++){
//              Node node = childNodes.item(i);
//              if("app".equals(node.getNodeName())){
//                  String pkg = null;
//                  String cls = null;
//                  String token = null;
//                  NamedNodeMap attributes = node.getAttributes();
//                  for(int j = 0; j < attributes.getLength(); j++){
//                      Node item = attributes.item(j);
//                      switch(item.getNodeName()){
//                      case "package":
//                          pkg = item.getTextContent();
//                          break;
//                      case "class":
//                          cls = item.getTextContent();
//                          break;
//                      case "token":
//                          token = item.getTextContent();
//                          break;
//                      }
//                  }11111111 00000000
//                  Log.e(TAG,pkg+"\n"+cls+"\n"+token);
//                  _serviceLauncher.addService(token,genIntent(pkg,cls),Context.BIND_AUTO_CREATE);
//                  NodeList nodeList = node.getChildNodes();
//                  if(nodeList != null && nodeList.getLength() > 0){
//                      for(int j = 0; j < nodeList.getLength(); j++){
//                          Node deps = nodeList.item(j);
//                          if("deps".equals(deps.getNodeName())){
//                              NodeList nodeList1 = deps.getChildNodes();
//                              for (int k = 0; k < nodeList1.getLength(); k++) {
//                                  Node dep = nodeList1.item(k);
//                                  if("dep".equals(dep.getNodeName())){
//                                      _serviceLauncher.addDependency(token,dep.getTextContent());
//                                  }
//                              }
//                          }   
                              
	}

	@Override
	public IBinder onBind(Intent intent) {
		return null;
//		return proxy;
	}

//	IBinder proxy = new Binder() {
//		protected boolean onTransact(int code, Parcel data, Parcel reply,
//				int flags) throws RemoteException {
//			switch (code) {
//			case TRANSACTION_OPEN:
//				data.enforceInterface(DESCRIPTOR);
//				int inidx = data.readInt();
//				LoggerExts.asInstance().openLogger(inidx);
//				reply.writeNoException();
//				return true;
//			case TRANSACTION_CLOSE:
//				data.enforceInterface(DESCRIPTOR);
//				LoggerExts.asInstance().closeLogger();
//				reply.writeNoException();
//				return true;
//			case TRANSACTION_DELETE:
//				data.enforceInterface(DESCRIPTOR);
//				LoggerExts.asInstance().deleteLoggerFile();
//				reply.writeNoException();
//				return true;
//			}
//			return super.onTransact(code, data, reply, flags);
//		}
//	};
}
