package com.rokid.wifi;

import java.util.Collections;
import java.util.List;

import android.app.Activity;
import android.content.Context;
import android.net.NetworkInfo;
import android.net.NetworkInfo.DetailedState;
import android.net.wifi.ScanResult;
import android.net.wifi.SupplicantState;
import android.net.wifi.WifiInfo;
import android.net.wifi.WifiManager;
import android.os.Bundle;
import android.view.View;
import android.view.View.OnClickListener;
import android.widget.Button;
import android.widget.EditText;


public class MainActivity extends Activity implements OnClickListener {

    private EditText pwd;
	private WifiManager mWifiManager;

	@Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_main);
        
      
        pwd = (EditText) findViewById(R.id.pwd);
        Button open_wifi = (Button) findViewById(R.id.open_wifi);
        Button conn_wifi = (Button) findViewById(R.id.conn_wifi);
        Button close_wifi = (Button) findViewById(R.id.close_wifi);
        open_wifi.setOnClickListener(this);
        conn_wifi.setOnClickListener(this);
        close_wifi.setOnClickListener(this);
        
        mWifiManager = (WifiManager)getSystemService(Context.WIFI_SERVICE);
		if(!mWifiManager.isWifiEnabled()){
			mWifiManager.setWifiEnabled(true);
		}
    }

	@Override
	public void onClick(View v) {
		switch (v.getId()) {
		case R.id.open_wifi:
			open_wifi();
			break;
		case R.id.conn_wifi:
			conn_wifi();
			break;
		case R.id.close_wifi:
			close_wifi();
			break;
		}
	}

	private void close_wifi() {
		
	}

	private void conn_wifi() {
		
	}

	private void open_wifi() {
		
	}
	
	public void onWifiStateChanged(int state){
		if(WifiManager.WIFI_STATE_ENABLED==state){
			mWifiManager.startScan();
		}
	}
	
	public void onUpdateAccessPoints(){
		if(WifiManager.WIFI_STATE_ENABLED==mWifiManager.getWifiState()){
			final List<ScanResult> results = mWifiManager.getScanResults();
			if (results != null) {
				for (ScanResult result : results) {
					if (result.SSID == null || result.SSID.length() == 0 
							|| result.capabilities.contains("[IBSS]")) {
						continue;
					}

					boolean found = false;
					for (AccessPoint mAccessPoint : apMap.getAll(result.SSID)) {
						if (mAccessPoint.update(result))
							found = true;
					}

					if (!found) {
						AccessPoint mAccessPoint = new AccessPoint(result);
						mAccessPointList.add(mAccessPoint);
						apMap.put(mAccessPoint.ssid, mAccessPoint);
					}
				}
			}
			Collections.sort(mAccessPointList); 
		}
		
	}
	
	public void onSupplicantConnectionStateChanged(SupplicantState state,int error){
		
	}
	
	public void onUpdateNetworkChanged(NetworkInfo info,WifiInfo mWifiInfo){
		
	}
	
	public void onUpdateConnectionState(DetailedState state){
		
	}
}
