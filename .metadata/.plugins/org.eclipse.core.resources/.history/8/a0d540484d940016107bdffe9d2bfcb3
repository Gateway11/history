package com.rokid.rksettings;

import java.util.HashMap;

import android.R.integer;
import android.os.IBinder;
import android.os.Parcel;
import android.util.Log;

public class SettingsMapper {
	private HashMap<String, SettingsBase> mNLPDispatchMap = new HashMap<String, SettingsBase>();
	private HashMap<Integer, SettingsBase> mMessageDispatchMap = new HashMap<Integer, SettingsBase>();
	private HashMap<Integer, SettingsBase> mBinderCallDispatchMap = new HashMap<Integer, SettingsBase>();
	
	private static final String TAG = "SettingsNLPMapper";
	public static final String DOMAIN_SETTING_STRING = "com.rokid.system.settings";
		//account
		public static final String INTENT_UNBIND_MASTER_STRING = "unbind_master";
		public static final String INTENT_ENABLE_SAND_BOX_STRING = "enable_sandbox";
		public static final String INTENT_DISABLE_SAND_BOX_STRING = "disable_sandbox";
		//misc
		public static final String INTENT_ERASE_DATA_STRING = "erase_data";
		public static final String INTENT_CONFIRM_ERASE_DATA_STRING = "confirm_erase_data";
		public static final String INTENT_CHANGE_LANGUAGE_STRING = "change_language";
		public static final String INTENT_GET_LANGUAGE_STRING = "get_language";
		public static final String INTENT_GET_BASIC_INFO_STRING = "get_basic_info";
		//idle
		//legacy for int type
		public static final String INTENT_SET_IDLE_TYPE_STRING = "set_idle_type";
		public static final String INTENT_GET_IDLE_TYPE_STRING = "get_idle_type";
		//these intents for string type
		public static final String INTENT_SET_DEFAULT_IDLE_TYPE_STRING = "set_idle_type";
		public static final String INTENT_GET_DEFAULT_IDLE_TYPE_STRING = "get_idle_type";
		public static final String INTENT_GET_ALL_IDLES_STRING  ="get_all_idle";
		
		public static final String INTENT_SET_HIBERNATE_TIME_STRING = "set_hibernate_time";
		public static final String INTENT_GET_HIBERNATE_TIME_STRING = "get_hibernate_time";
		public static final String INTENT_CHANGE_IDLE_STRING = "change_screensaver";
		
		//wifi
		public static final String INTENT_DISCONNECT_NETWORK_STRING = "disconnect_network";
		
		//bt
		public static final String INTENT_ENABLE_BLUETOOTH_STRING = "openbluetooth";
		public static final String INTENT_DISABLE_BLUETOOTH_STRING = "disablebluetooth";
		public static final String INTENT_BLUETOOTH_IS_ENABLE_STRING = "isbluetoothenable";
		
			public static final int TRANSACTION_BLUETOOTH_PLAY = IBinder.FIRST_CALL_TRANSACTION + 29;
			public static final int TRANSACTION_BLUETOOTH_STOP = IBinder.FIRST_CALL_TRANSACTION + 30;
			public static final int TRANSACTION_BLUETOOTH_PAUSE = IBinder.FIRST_CALL_TRANSACTION + 31;
			public static final int TRANSACTION_BLUETOOTH_NEXT = IBinder.FIRST_CALL_TRANSACTION + 32;
			public static final int TRANSACTION_BLUETOOTH_PREV = IBinder.FIRST_CALL_TRANSACTION + 33;
			public static final int TRANSACTION_BLUETOOTH_VOL_UP = IBinder.FIRST_CALL_TRANSACTION + 34;
			public static final int TRANSACTION_BLUETOOTH_VOL_DOWN = IBinder.FIRST_CALL_TRANSACTION + 35;
			
			public static final int TRANSACTION_BLUETOOTH_REGISTER_EVENT_CALLBACK = IBinder.FIRST_CALL_TRANSACTION + 36;
			public static final int TRANSACTION_BLUETOOTH_QUERY_AVRCP_ATTR = IBinder.FIRST_CALL_TRANSACTION + 37;
			public static final int TRANSACTION_BLUETOOTH_QUERY_BT_STATE = IBinder.FIRST_CALL_TRANSACTION + 38;
			public static final int TRANSACTION_BLUETOOTH_QUERY_BT_CONNECTION_STATE = IBinder.FIRST_CALL_TRANSACTION + 39;
			public static final int TRANSACTION_BLUETOOTH_QUERY_A2DP_CONNECTION_STATE = IBinder.FIRST_CALL_TRANSACTION + 40;
			public static final int TRANSACTION_BLUETOOTH_QUERY_AVRCP_CONTROLLER_CONNECTION_STATE = IBinder.FIRST_CALL_TRANSACTION + 41;
			public static final int TRANSACTION_BLUETOOTH_QUERY_A2DP_PLAY_STATE = IBinder.FIRST_CALL_TRANSACTION + 42;
			
	public static final String DOMAIN_POWER_SETTING_STRING = "com.rokid.system.power";
		//power
		public static final String INTENT_BATTERY_CHARGING_STRING = "battery_charging";
		public static final String INTENT_BATTERY_LEVEL_STRING = "battery_level";
		public static final String INTENT_BATTERY_USETIME_STRING = "battery_usetime";
	
	private RemoteSettingsServices mSettingsServices;
	
	public SettingsMapper(RemoteSettingsServices mSettingsServices) {
		this.mSettingsServices = mSettingsServices;
	}
	
	private String buildKeyString(String a, String b) {
		return a + "_" + b;
	}
	
	public void init() {
		//create kinds of settings
		mSettingsServices.createAndInitSettings();
		
		mNLPDispatchMap.put(buildKeyString(DOMAIN_SETTING_STRING, INTENT_UNBIND_MASTER_STRING), mSettingsServices.getAccountSettings());
		mNLPDispatchMap.put(buildKeyString(DOMAIN_SETTING_STRING, INTENT_ENABLE_SAND_BOX_STRING), mSettingsServices.getAccountSettings());
		mNLPDispatchMap.put(buildKeyString(DOMAIN_SETTING_STRING, INTENT_DISABLE_SAND_BOX_STRING), mSettingsServices.getAccountSettings());
		
		mNLPDispatchMap.put(buildKeyString(DOMAIN_SETTING_STRING, INTENT_ERASE_DATA_STRING), mSettingsServices.getMiscSettings());
		mNLPDispatchMap.put(buildKeyString(DOMAIN_SETTING_STRING, INTENT_CONFIRM_ERASE_DATA_STRING), mSettingsServices.getMiscSettings());
		mNLPDispatchMap.put(buildKeyString(DOMAIN_SETTING_STRING, INTENT_CHANGE_LANGUAGE_STRING), mSettingsServices.getMiscSettings());
		mNLPDispatchMap.put(buildKeyString(DOMAIN_SETTING_STRING, INTENT_GET_LANGUAGE_STRING), mSettingsServices.getMiscSettings());
		mNLPDispatchMap.put(buildKeyString(DOMAIN_SETTING_STRING, INTENT_GET_BASIC_INFO_STRING), mSettingsServices.getMiscSettings());
		
		mNLPDispatchMap.put(buildKeyString(DOMAIN_SETTING_STRING, INTENT_SET_IDLE_TYPE_STRING), mSettingsServices.getIdleSettings());
		mNLPDispatchMap.put(buildKeyString(DOMAIN_SETTING_STRING, INTENT_GET_IDLE_TYPE_STRING), mSettingsServices.getIdleSettings());
		mNLPDispatchMap.put(buildKeyString(DOMAIN_SETTING_STRING, INTENT_SET_HIBERNATE_TIME_STRING), mSettingsServices.getIdleSettings());
		mNLPDispatchMap.put(buildKeyString(DOMAIN_SETTING_STRING, INTENT_GET_HIBERNATE_TIME_STRING), mSettingsServices.getIdleSettings());
		mNLPDispatchMap.put(buildKeyString(DOMAIN_SETTING_STRING, INTENT_CHANGE_IDLE_STRING), mSettingsServices.getIdleSettings());
		mNLPDispatchMap.put(buildKeyString(DOMAIN_SETTING_STRING, INTENT_GET_ALL_IDLES_STRING), mSettingsServices.getIdleSettings());
		
		mNLPDispatchMap.put(buildKeyString(DOMAIN_SETTING_STRING, INTENT_DISCONNECT_NETWORK_STRING), mSettingsServices.getWifiSettings());
		
		mNLPDispatchMap.put(buildKeyString(DOMAIN_SETTING_STRING, INTENT_ENABLE_BLUETOOTH_STRING), mSettingsServices.getBluetoothSettings());
		mNLPDispatchMap.put(buildKeyString(DOMAIN_SETTING_STRING, INTENT_DISABLE_BLUETOOTH_STRING), mSettingsServices.getBluetoothSettings());
		mNLPDispatchMap.put(buildKeyString(DOMAIN_SETTING_STRING, INTENT_BLUETOOTH_IS_ENABLE_STRING), mSettingsServices.getBluetoothSettings());
		
		mNLPDispatchMap.put(buildKeyString(DOMAIN_POWER_SETTING_STRING, INTENT_BATTERY_CHARGING_STRING), mSettingsServices.getPowetSettings());
		mNLPDispatchMap.put(buildKeyString(DOMAIN_POWER_SETTING_STRING, INTENT_BATTERY_LEVEL_STRING), mSettingsServices.getPowetSettings());
		mNLPDispatchMap.put(buildKeyString(DOMAIN_POWER_SETTING_STRING, INTENT_BATTERY_USETIME_STRING), mSettingsServices.getPowetSettings());
		
		//create message dispatch
		
		//create binder call dispatch
		mBinderCallDispatchMap.put(TRANSACTION_BLUETOOTH_PLAY, mSettingsServices.getBluetoothSettings());
		mBinderCallDispatchMap.put(TRANSACTION_BLUETOOTH_STOP, mSettingsServices.getBluetoothSettings());
		mBinderCallDispatchMap.put(TRANSACTION_BLUETOOTH_PAUSE, mSettingsServices.getBluetoothSettings());
		mBinderCallDispatchMap.put(TRANSACTION_BLUETOOTH_NEXT, mSettingsServices.getBluetoothSettings());
		mBinderCallDispatchMap.put(TRANSACTION_BLUETOOTH_PREV, mSettingsServices.getBluetoothSettings());
		mBinderCallDispatchMap.put(TRANSACTION_BLUETOOTH_VOL_UP, mSettingsServices.getBluetoothSettings());
		mBinderCallDispatchMap.put(TRANSACTION_BLUETOOTH_VOL_DOWN, mSettingsServices.getBluetoothSettings());
		mBinderCallDispatchMap.put(TRANSACTION_BLUETOOTH_REGISTER_EVENT_CALLBACK, mSettingsServices.getBluetoothSettings());
		mBinderCallDispatchMap.put(TRANSACTION_BLUETOOTH_QUERY_AVRCP_ATTR, mSettingsServices.getBluetoothSettings());
		mBinderCallDispatchMap.put(TRANSACTION_BLUETOOTH_QUERY_BT_STATE, mSettingsServices.getBluetoothSettings());
		mBinderCallDispatchMap.put(TRANSACTION_BLUETOOTH_QUERY_BT_CONNECTION_STATE, mSettingsServices.getBluetoothSettings());
		mBinderCallDispatchMap.put(TRANSACTION_BLUETOOTH_QUERY_A2DP_CONNECTION_STATE, mSettingsServices.getBluetoothSettings());
		mBinderCallDispatchMap.put(TRANSACTION_BLUETOOTH_QUERY_AVRCP_CONTROLLER_CONNECTION_STATE, mSettingsServices.getBluetoothSettings());
		mBinderCallDispatchMap.put(TRANSACTION_BLUETOOTH_QUERY_A2DP_PLAY_STATE, mSettingsServices.getBluetoothSettings());
	}
	
	public void dispatchNLP(String domain, String intent, String nlp) {
		String key = buildKeyString(domain, intent);
		SettingsBase base = null;
		if ((base = mNLPDispatchMap.get(key)) == null) {
			Log.w(TAG, "cannot find entry for domain " + domain + " intent " + intent + " nlp: " + nlp);
			return;
		}
		
		base.handleNLP(intent, nlp);
	}
	
	public boolean dispatchBinderCall(int callTransaction, Parcel data, Parcel reply, int flags) {
		SettingsBase base = null;
		if ((base = mBinderCallDispatchMap.get(callTransaction)) == null) {
			Log.w(TAG, "cannot find entry for binder call " + callTransaction);
			return true;
		}
		
		return base.handleBinderTransaction(callTransaction, data, reply, flags);
	}
}
