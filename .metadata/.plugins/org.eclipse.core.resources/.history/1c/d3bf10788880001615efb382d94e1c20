package com.rokid.rkcommonlibrary.rksysapi;

import android.text.TextUtils;
import android.util.Log;

import org.json.JSONObject;

import java.util.Map;

import rokid.os.RKConnectionUtil;

/**
 * Created by Bassam on 16/7/19.
 * RK推送工具类
 */
public class RKPushUtil {
    /**
     * 当前类的实例对象
     */
    private static RKPushUtil instance;

    /**
     * 单例方法调用
     *
     * @return
     */
    public static RKPushUtil getInstance() {
        if (instance == null) {
            synchronized (RKPushUtil.class) {
                if (instance == null) {
                    instance = new RKPushUtil();
                }
            }
        }
        return instance;
    }

    /**
     * 推送消息到手机端
     * 消息的内容需要和手机端协商定义,该消息会直接发送给手机端,而不是出现通知栏
     *
     * @param content 消息内容
     * @return
     */
    public boolean pushMessageToMaster(String content) {
        try {
            RKConnectionUtil connection = RKApiManager.getInstance().getmRKConnectionUtil();
            if (connection != null) {
                return connection.pushMessageToMaster(content);
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
        return false;
    }

    /**
     * 发送通知到手机端
     * 直接将Push的内容显示在手机端的通知栏上
     *
     * @param content 通知内容
     * @return
     */
    public boolean pushNotificationToMaster(String content) {
        try {
            RKConnectionUtil connection = RKApiManager.getInstance().getmRKConnectionUtil();
            if (connection != null) {
                return connection.pushNotificationToMaster(content);
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
        return false;

    }

    /**
     * push消息
     *
     * @param content       消息显示标题内容
     * @param sound         声音,如果不需要改变,则传空
     * @param extParameters 拓展字段,用于传递数据,不做显示使用
     * @return
     */
    public boolean pushNotificationToMaster(String content, String sound, Map<String, String>
            extParameters) {
        try {
            RKConnectionUtil connection = RKApiManager.getInstance().getmRKConnectionUtil();
            if (connection != null) {
                JSONObject notificationObject = new JSONObject();
                JSONObject extObject = new JSONObject();
                if (TextUtils.isEmpty(sound)) {
                    extObject.put("sound", "default");
                } else {
                    extObject.put("sound", sound);
                }
                notificationObject.put("sys", extObject);
                JSONObject iOSExtParameters = new JSONObject();
                if (extParameters != null) {
                    for (String key : extParameters.keySet()) {
                        iOSExtParameters.put(key, extParameters.get(key));
                    }
                }
                notificationObject.put("ext", iOSExtParameters);
                Log.i("extra", notificationObject.toString());
                return connection.pushNotificationToMaster(content, notificationObject.toString());
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
        return false;

    }

}
