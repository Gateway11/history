package com.example.networkconnect;

import java.util.ArrayList;
import java.util.Collections;
import java.util.HashMap;
import java.util.List;

import android.net.wifi.ScanResult;
import android.net.wifi.WifiConfiguration;
import android.net.wifi.WifiConfiguration.AuthAlgorithm;
import android.net.wifi.WifiConfiguration.KeyMgmt;
import android.net.wifi.WifiManager;
import android.os.Handler;
import android.util.Log;

public class RKWifiConnectHelper {

	private Handler mHandler;
	private WifiManager mWifiManager;

	public static final int SECURITY_NONE = 0;
	public static final int SECURITY_WEP = 1;
	public static final int SECURITY_PSK = 2;
	public static final int SECURITY_EAP = 3;
	Multimap<String, RKAccessPoint> apMap = new Multimap<String, RKAccessPoint>();

	private static int getSecurity(ScanResult result) {
		if (result.capabilities.contains("WEP")) {
			return SECURITY_WEP;
		} else if (result.capabilities.contains("PSK")) {
			return SECURITY_PSK;
		} else if (result.capabilities.contains("EAP")) {
			return SECURITY_EAP;
		}
		return SECURITY_NONE;
	}

	public RKWifiConnectHelper(Handler mHandler, WifiManager mWifiManager) {
		this.mHandler = mHandler;
		this.mWifiManager = mWifiManager;
	}

	public void connect(String ssid, String pwd) {
		List<WifiConfiguration> networks = mWifiManager.getConfiguredNetworks();
		for (WifiConfiguration wifiConfiguration : networks) {
			mWifiManager.removeNetwork(wifiConfiguration.networkId);
		}
		List<ScanResult> results = mWifiManager.getScanResults();

		int addNetwork = mWifiManager.addNetwork(getConfig(ssid, pwd));
		mWifiManager.enableNetwork(addNetwork, true);
		mWifiManager.startScan();
	}

	public void disconnect() {
		List<WifiConfiguration> list = mWifiManager.getConfiguredNetworks();
		for (WifiConfiguration wifi : list) {
			mWifiManager.removeNetwork(wifi.networkId);
		}
		mWifiManager.saveConfiguration();
	}

	private WifiConfiguration getConfig(String ssid, String pwd) {
		List<ScanResult> results = mWifiManager.getScanResults();
		WifiConfiguration config = new WifiConfiguration();
		ScanResult mResult = null;
		for (ScanResult scanResult : results) {
			if (scanResult.SSID.equals(ssid)) {
				mResult = scanResult;
				break;
			}
		}
		if (mResult == null) {
			mWifiManager.startScan();
			Log.e("du", "SSID not find");
			return null;
		}
		config.SSID = "\"" + mResult.SSID + "\"";
		switch (getSecurity(mResult)) {
			case SECURITY_NONE: {
				config.allowedKeyManagement.set(KeyMgmt.NONE);
			}
				break;
			case SECURITY_WEP: {
				config.allowedKeyManagement.set(KeyMgmt.NONE);
				config.allowedAuthAlgorithms.set(AuthAlgorithm.OPEN);
				config.allowedAuthAlgorithms.set(AuthAlgorithm.SHARED);
				int len = pwd.length();
				if ((len == 10) || (len == 26) || (len == 58)
						&& pwd.matches("[0-9A-Fa-f]*")) {
					config.wepKeys[0] = pwd;
				} else {
					config.wepKeys[0] = '"' + pwd + '"';
				}
			}
				break;
			case SECURITY_PSK: {
				config.allowedKeyManagement.set(KeyMgmt.WPA_PSK);
				if (pwd.matches("[0-9A-Fa-f]{64}")) {
					config.preSharedKey = pwd;
				} else {
					config.preSharedKey = '"' + pwd + '"';
				}
			}
			break;
		}
		return config;
	}
	
	public void updateAccessPoints(){
		
	}
	
	public void updateNetworkInfo(){
		
	}

	private static class Multimap<K, V> {
		private final HashMap<K, List<V>> store = new HashMap<K, List<V>>();

		/** retrieve a non-null list of values with key K */
		List<V> getAll(K key) {
			List<V> values = store.get(key);
			return values != null ? values : Collections.<V> emptyList();
		}

		void put(K key, V val) {
			List<V> curVals = store.get(key);
			if (curVals == null) {
				curVals = new ArrayList<V>(3);
				store.put(key, curVals);
			}
			curVals.add(val);
		}
	}
}
