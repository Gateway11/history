package com.rokid.rkcommonlibrary.ui.presenter;

import com.rokid.rkcommonlibrary.beans.RKEventBean;
import com.rokid.rkcommonlibrary.listener.RKOnLeftClickListener;
import com.rokid.rkcommonlibrary.listener.RKOnRightClickListener;

import java.util.Timer;
import java.util.TimerTask;

/**
 * Created by Bassam on 16/8/1.
 */
public class RKClickPresenter {
    private RKOnLeftClickListener onLeftClickListener;
    private RKOnRightClickListener onRightClickListener;
    private final long DEFAULT_TOUCH_TIME_LONG = 50;
    private RKEventBean touchEventBean;
    private Timer touchTimer;
    private TimerTask leftTimerTask;
    private TimerTask rightTimerTask;
    private int leftClickCount = 0;
    private int rightClickCount = 0;
    private long leftClickTime = 0;
    private long rightClickTime = 0;

    /**
     * 当前类的实例对象
     */
    private static RKClickPresenter instance;

    /**
     * 单例方法调用
     *
     * @return
     */
    public static RKClickPresenter getInstance() {
        if (instance == null) {
            synchronized (RKClickPresenter.class) {
                if (instance == null) {
                    instance = new RKClickPresenter();
                }
            }
        }
        return instance;
    }

    public void setOnLeftClickListener(RKOnLeftClickListener onLeftClickListener) {
        this.onLeftClickListener = onLeftClickListener;
    }

    public void setOnRightClickListener(RKOnRightClickListener onRightClickListener) {
        this.onRightClickListener = onRightClickListener;
    }

    public boolean doLeftClickEvntPresenter(RKEventBean eventBean) {
        if (onLeftClickListener == null) {
            return false;
        }
        if (touchEventBean != null && !touchEventBean.getDevice().equals(eventBean.getDevice()
        )) {
            if (eventBean.getEvent().getValue() != 0) {
                if (touchTimer != null) {
                    touchTimer.cancel();
                    touchTimer = null;
                }
                if (leftTimerTask != null) {
                    leftTimerTask.cancel();
                    leftTimerTask = null;
                }
                if (rightTimerTask != null) {
                    rightTimerTask.cancel();
                    rightTimerTask = null;
                }
            }
        }
        touchEventBean = eventBean;
        if (eventBean.getEvent().getValue() != 0) {
            leftClickCount++;
            if (System.currentTimeMillis() - leftClickTime > DEFAULT_TOUCH_TIME_LONG) {
                leftClickTime = System.currentTimeMillis();
                if (leftClickCount == 1) {
                    touchTimer = new Timer();
                    leftTimerTask = new TimerTask() {
                        @Override
                        public void run() {
                            touchEventBean = null;
                            leftClickCount = 0;
                            onLeftClickListener.onLeftClickListener();
                        }
                    };
                    touchTimer.schedule(leftTimerTask, 500);
                    return true;
                }
            } else {
                leftClickTime = System.currentTimeMillis();
            }
            return false;
        } else {
            leftClickCount = 0;
            leftClickTime = 0;
        }
        return false;
    }

    public boolean doRightClickEvntPresenter(RKEventBean eventBean) {
        if (onRightClickListener == null) {
            return false;
        }
        if (touchEventBean != null && !touchEventBean.getDevice().equals(eventBean.getDevice()
        )) {
            if (eventBean.getEvent().getValue() != 0) {
                if (touchTimer != null) {
                    touchTimer.cancel();
                    touchTimer = null;
                }
                if (leftTimerTask != null) {
                    leftTimerTask.cancel();
                    leftTimerTask = null;
                }
                if (rightTimerTask != null) {
                    rightTimerTask.cancel();
                    rightTimerTask = null;
                }
            }
        }
        touchEventBean = eventBean;
        if (eventBean.getEvent().getValue() != 0) {
            rightClickCount++;
            if (System.currentTimeMillis() - rightClickTime > DEFAULT_TOUCH_TIME_LONG) {
                rightClickTime = System.currentTimeMillis();
                if (rightClickCount == 1) {
                    touchTimer = new Timer();
                    rightTimerTask = new TimerTask() {
                        @Override
                        public void run() {
                            touchEventBean = null;
                            rightClickCount = 0;
                            onRightClickListener.onRightClickListener();
                        }
                    };
                    touchTimer.schedule(rightTimerTask, 500);
                    return true;
                }
            } else {
                rightClickTime = System.currentTimeMillis();
            }
            return false;
        } else {
            rightClickCount = 0;
            rightClickTime = 0;
        }
        return false;
    }

    public void stopTouchPresenter() {
        if (touchTimer != null) {
            touchTimer.cancel();
            touchTimer = null;
        }
        if (leftTimerTask != null) {
            leftTimerTask.cancel();
            leftTimerTask = null;
        }
        if (rightTimerTask != null) {
            rightTimerTask.cancel();
            rightTimerTask = null;
        }
    }
}
