package rokid.service;
import java.util.concurrent.locks.Condition;
import java.util.concurrent.locks.Lock;
import java.util.concurrent.locks.ReentrantLock;

import android.content.ComponentName;
import android.content.Context;
import android.content.Intent;
import android.content.ServiceConnection;
import android.os.IBinder;
import android.util.Log;

import rokid.service.util.*;

public class CommonServiceConnection implements ServiceConnection {
    private static final String TAG = "CommonServiceConnection";
    private IBinder mBinder;
    private BooleanResultWrapper mFlag;
    private Lock mLock;
    private Condition mCondition;
    private String who;

    private String action;
    private Context mContext;
    private boolean onRestart;
    private onProxyRevivalListener mOnProxyRevivalListener;
    public interface onProxyRevivalListener {
        void onProxyRevival(CommonServiceConnection thiz, IBinder proxy);
    }

    public CommonServiceConnection(String who, Context mContext, String action, onProxyRevivalListener onProxyRevivalListener) {
        this.mFlag = new BooleanResultWrapper(false);
        this.mLock = new ReentrantLock();
        this.mCondition = mLock.newCondition();
        this.mOnProxyRevivalListener = onProxyRevivalListener;

        this.who = who;
        this.onRestart = false;
        this.action = action;
        this.mContext = mContext;
    }

    public BooleanResultWrapper getFlagWrapper() {
        return mFlag;
    }

    public String who() {
        return this.who;
    }

    public IBinder getBinder() {
        return mBinder;
    }

    public Lock getLock() {
        return mLock;
    }

    public Condition getCondition() {
        return mCondition;
    }

    @Override
    public void onServiceConnected(ComponentName name, IBinder service) {
        Log.i(TAG, "component: " + name + " who: " + who + " connected!");
        if (onRestart) {
            Log.i(TAG, "component: " + name + " is back to normal");
            this.mBinder = service;
            if (this.mOnProxyRevivalListener != null) {
                this.mOnProxyRevivalListener.onProxyRevival(this, this.mBinder);
            }
        } else {
            this.mBinder = service;
            mLock.lock();
            try {
                mFlag.setResult(true);
                mCondition.signal();
            } catch (Exception e) {
                e.printStackTrace();
            } finally {
                mLock.unlock();
            }
        }
    }

    @Override
    public void onServiceDisconnected(ComponentName name) {
        Log.e(TAG, "component: " + name + " who: " + who + " is dead!");
        this.mBinder = null;
        onRestart = true;
        mContext.bindService(new Intent(this.action), this, Context.BIND_AUTO_CREATE);
    }
}
