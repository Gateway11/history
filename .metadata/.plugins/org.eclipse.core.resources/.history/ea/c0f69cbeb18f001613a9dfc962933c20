package com.rokid.wifi;

import rokid.os.RKWifiManagerNativeStub;
import rokid.os.IRKWifiManagerCallback;
import com.rokid.wifi.WifiEventReceiver.WifiEventCallback;
import android.content.Context;
import android.os.Handler;
import android.os.Looper;
import android.os.IBinder;
import android.net.wifi.WifiManager;
import android.net.wifi.WifiConfiguration;
import android.net.wifi.WifiConfiguration.KeyMgmt;
import android.net.wifi.WifiConfiguration.AuthAlgorithm;
import android.net.wifi.WifiInfo;
import android.net.wifi.SupplicantState;
import android.net.wifi.ScanResult;
import android.net.NetworkInfo;
import android.net.NetworkInfo.DetailedState;
import java.util.concurrent.atomic.AtomicBoolean;
import android.util.Log;
import java.util.List;
import java.util.Map;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Collections;

public class RKWifiManagerNative extends RKWifiManagerNativeStub implements WifiEventCallback {

	private final String TAG = "RKWifiManagerNative";
	private final String UNKNOWN_SSID="<unknown ssid>";
	private final String _0x0="0x0";//default ssid

	private static final int WIFI_STATE_DISCONNECTED=0;
	private static final int WIFI_STATE_OBTAINING_IPADDR=1;
	private static final int WIFI_STATE_VERIFYING_POOR_LINK=2;
	private static final int WIFI_STATE_CAPTIVE_PORTAL_CHECK=3;
	private static final int WIFI_STATE_CONNECTED=4;
	private static int mConnectState=WIFI_STATE_DISCONNECTED;
	

	public void disconnect(boolean forget) {
		if (forget) {
			List<WifiConfiguration> list = mWifiManager.getConfiguredNetworks();
			for (WifiConfiguration wifi : list) {
				mWifiManager.removeNetwork(wifi.networkId);
			}
			// save the modify
			mWifiManager.saveConfiguration();
		}
		// TODO: why comment ?
		// wifiManager.disconnect();
	}

	public void onUpdateConnectionState(DetailedState state) {
		updateConnectionState(state);
	}
	
	public void onSupplicantConnectionStateChanged(SupplicantState state,int error) {
		WifiInfo mWifiInfo=mWifiManager.getConnectionInfo();
		if(error==1&&_0x0.equals(mWifiInfo.getSSID())){
		}
		if (!wifiConnected.get() && WifiEventReceiver.isHandshakeState(state)) {
			updateConnectionState(WifiInfo.getDetailedStateOf(state));
		} else {
			updateConnectionState(null);
		}
	}

	// ********************
	// * message handlers *
	// ********************
	public void onDisconnect() {
		//disconnect with pairing failed..
		if (connectingAccessPoint != null) {
			//wtf mConnected become true....
			if (wifiConnected.get()) {
				Log.e(TAG, "wtf disconnect with connection done...");
				connectingAccessPoint = null;
				return;
			}

			WifiConfiguration config = connectingAccessPoint.getConfig();
			for (WifiConfiguration configuration: mWifiManager.getConfiguredNetworks()) {
				//forget the error one
				if (configuration.SSID.equals(config.SSID)) {
					Log.w(TAG, "forget current ap...pwd may be wrong");
					mWifiManager.forget(configuration.networkId, new mWifiManager.ActionListener() {
						@Override
						public void onSuccess() {
						}
						@Override
						public void onFailure(int reason) {
							Log.e (TAG, "forget failed...");
						}
					});
				}
			}
			Log.e(TAG, "connect failed since AUTH timeout! ");
			lastConnectedState = WIFI_STATE_DISCONNECTED;
			connectingAccessPoint = null;
			//onConnectFailed...
			//tell the client...
			messageHandler.removeMessages(RKWifiMessageHandler.MESSAGE_WIFI_CONNECT_TIMEOUT);
			wifiNotifier.notifyPasswdError();
			return;
		}
		//disconnect from the connect state?
		Log.i(TAG, "recv message disconnect without connectingAP...");
		messageHandler.removeMessages(RKWifiMessageHandler.MESSAGE_WIFI_CONNECT_TIMEOUT);
		onNetworkReallyDisconnected();
	}

	public void onConnectTimeout() {
		Log.e(TAG, "connection timeout");
		synchronized (this) {
			//we are in a pairing progress
			if (connectingAccessPoint != null) {
				if (wifiConnected.get()) {
					Log.i(TAG, "timeout with connected");
					connectingAccessPoint = null;
					lastConnectedState = WIFI_STATE_CONNECTED;
					wifiNotifier.notifyConnected(false);
				} else {
					connectingAccessPoint = null;
					lastConnectedState = WIFI_STATE_DISCONNECTED;
					wifiNotifier.notifyPasswdError();
				}
			//we are in a disconnect progress
			} else {
				if (wifiConnected.get()) {
					Log.i(TAG, "timeout with connected");
					lastConnectedState = WIFI_STATE_CONNECTED;
					wifiNotifier.notifyConnected(true);
				} else {
					lastConnectedState = WIFI_STATE_DISCONNECTED;
					wifiNotifier.notifyDisconnected();
				}
			}
		}
	}

	private void updateConnectionState(DetailedState state) {
		if (!mWifiManager.isWifiEnabled()) {
			apScanner.pause();
			return;
		}

		if (state == DetailedState.OBTAINING_IPADDR) {
			apScanner.pause();
		} else {
			apScanner.resume();
		}

		lastInfo = mWifiManager.getConnectionInfo();
		if (state != null) {
			lastState = state;
		}

		for (AccessPoint accessPoint: accessPoints) {
			accessPoint.update(lastInfo, lastState);
		}
	}

	private void onNetworkReallyDisconnected() {
		Log.i(TAG, "really disconnect...");
		lastConnectedState = WIFI_STATE_DISCONNECTED;
		connectingAccessPoint = null;

		messageHandler.removeMessages(RKWifiMessageHandler.MESSAGE_WIFI_CONNECT_TIMEOUT);
		//notify client
		wifiNotifier.notifyDisconnected();
	}
}
