package com.rokid.rkcommonlibrary.cache;

import com.rokid.rkcommonlibrary.RKApplicationEX;
import com.rokid.rkcommonlibrary.utils.RKSPUtil;

/**
 * Created by Bassam on 16/7/12.
 */
public class CacheManager {
    private static CacheManager instance;

    public static CacheManager getInstance() {
        if (instance == null) {
            synchronized (CacheManager.class) {
                if (instance == null) {
                    instance = new CacheManager();
                }
            }
        }
        return instance;
    }

    /**
     * 将数据内容缓存在内存中
     *
     * @param key
     * @param value
     * @return boolean
     */
    public boolean cacheToApp(String key, Object value) {
        if (RKApplicationEX.getInstance() == null) {
            return false;
        }
        return RKApplicationEX.getInstance().cache(key, value);
    }

    /**
     * 从App中内存中获取缓存
     *
     * @param key
     * @return
     */
    public Object getCacheFromApp(String key) {
        if (RKApplicationEX.getInstance() == null) {
            return null;
        }
        return RKApplicationEX.getInstance().getCache(key);

    }

    /**
     * 从内存中移除指定缓存
     *
     * @param key
     * @return
     */
    public boolean removeCacheFromApp(String key) {
        if (RKApplicationEX.getInstance() == null) {
            return false;
        }
        return RKApplicationEX.getInstance().removeCache(key);
    }

    /**
     * 清理内存缓存
     *
     * @return
     */
    public boolean cleanAppCache() {
        if (RKApplicationEX.getInstance() == null) {
            return false;
        }
        return RKApplicationEX.getInstance().clearCache();
    }

    /**
     * 将String类型数据缓存到SharePreferences里面
     *
     * @param name
     * @param value
     * @return
     */
    public boolean cacheToSP(String name, String value) {
        if (RKApplicationEX.getInstance() == null) {
            return false;
        }
        if (RKSPUtil.getInstance() == null) {
            return false;
        }
        return RKSPUtil.getInstance().setPreferences(RKApplicationEX.getInstance(), name, value);
    }

    /**
     * 获取String类型的缓存
     *
     * @param name
     * @return
     */
    public String getStringFromSP(String name) {
        if (RKApplicationEX.getInstance() == null) {
            return "";
        }
        if (RKSPUtil.getInstance() == null) {
            return "";
        }
        return RKSPUtil.getInstance().getStringPreferences(RKApplicationEX.getInstance(), name);
    }

    /**
     * 将boolean类型数据缓存到SharePreferences里面
     *
     * @param name
     * @param value
     * @return
     */
    public boolean cacheToSP(String name, boolean value) {
        if (RKApplicationEX.getInstance() == null) {
            return false;
        }
        if (RKSPUtil.getInstance() == null) {
            return false;
        }
        return RKSPUtil.getInstance().setPreferences(RKApplicationEX.getInstance(), name, value);
    }

    /**
     * 获取boolean的缓存,默认返回是false
     *
     * @param name
     * @return
     */
    public boolean getBooleanFromSP(String name) {
        if (RKApplicationEX.getInstance() == null) {
            return false;
        }
        if (RKSPUtil.getInstance() == null) {
            return false;
        }
        return RKSPUtil.getInstance().getBooleanPreferences(RKApplicationEX.getInstance(), name, false);
    }

    /**
     * 将int类型数据缓存到SharePreferences里面
     *
     * @param name
     * @param value
     * @return
     */
    public boolean cacheToSP(String name, int value) {
        if (RKApplicationEX.getInstance() == null) {
            return false;
        }
        if (RKSPUtil.getInstance() == null) {
            return false;
        }
        return RKSPUtil.getInstance().setPreferences(RKApplicationEX.getInstance(), name, value);
    }

    /**
     * 获取int类型缓存,默认返回0
     *
     * @param name
     * @return
     */
    public int getIntFromSP(String name) {
        if (RKApplicationEX.getInstance() == null) {
            return 0;
        }
        if (RKSPUtil.getInstance() == null) {
            return 0;
        }
        return RKSPUtil.getInstance().getIntPreferences(RKApplicationEX.getInstance(), name, 0);
    }

    /**
     * 将long类型数据缓存到SharePreferences里面
     *
     * @param name
     * @param value
     * @return
     */
    public boolean cacheToSP(String name, long value) {
        if (RKApplicationEX.getInstance() == null) {
            return false;
        }
        if (RKSPUtil.getInstance() == null) {
            return false;
        }
        return RKSPUtil.getInstance().setPreferences(RKApplicationEX.getInstance(), name, value);
    }

    /**
     * 获取long型缓存数据,默认返回0
     *
     * @param name
     * @return
     */
    public long getLongFromSP(String name) {
        if (RKApplicationEX.getInstance() == null) {
            return 0;
        }
        if (RKSPUtil.getInstance() == null) {
            return 0;
        }
        return RKSPUtil.getInstance().getLongPreferences(RKApplicationEX.getInstance(), name, 0l);
    }

    /**
     * 将float类型数据缓存到SharePreferences里面
     *
     * @param name
     * @param value
     * @return
     */
    public boolean cacheToSP(String name, float value) {
        if (RKApplicationEX.getInstance() == null) {
            return false;
        }
        if (RKSPUtil.getInstance() == null) {
            return false;
        }
        return RKSPUtil.getInstance().setPreferences(RKApplicationEX.getInstance(), name, value);
    }

    /**
     * 获取float型缓存数据,默认返回0.0
     *
     * @param name
     * @return
     */
    public float getFloatFromSP(String name) {
        if (RKApplicationEX.getInstance() == null) {
            return 0;
        }
        if (RKSPUtil.getInstance() == null) {
            return 0;
        }
        return RKSPUtil.getInstance().getFloatPreferences(RKApplicationEX.getInstance(), name, 0.0f);
    }

    /**
     * 将一个对象缓存到SharePreferences里面,注意需要实现java的序列化函数
     *
     * @param name
     * @param value
     * @return
     */
    public boolean cacheToSP(String name, Object value) {
        if (RKApplicationEX.getInstance() == null) {
            return false;
        }
        if (RKSPUtil.getInstance() == null) {
            return false;
        }
        return RKSPUtil.getInstance().setPreferences(RKApplicationEX.getInstance(), name, value);
    }

    /**
     * 获得Object缓存对象
     *
     * @param name
     * @return
     */
    public Object getObjectFromSP(String name) {
        if (RKApplicationEX.getInstance() == null) {
            return null;
        }
        if (RKSPUtil.getInstance() == null) {
            return null;
        }
        return RKSPUtil.getInstance().getObjectPreferences(RKApplicationEX.getInstance(), name);
    }

}
