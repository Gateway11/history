package com.rokid.wifi;

import java.util.Comparator;

import android.content.Context;
import android.net.NetworkInfo.DetailedState;
import android.net.wifi.ScanResult;
import android.net.wifi.WifiConfiguration;
import android.net.wifi.WifiConfiguration.KeyMgmt;
import android.net.wifi.WifiInfo;
import android.net.wifi.WifiManager;
import android.os.Bundle;

public class AccessPoint implements Comparable{
	private static final String TAG = "AccessPoint";
	
	enum PskType {
		UNKNOWN,
		WPA,
		WPA2,
		WPA_WPA2
	}
	
	public static final int SECURITY_NONE = 0;
	public static final int SECURITY_WEP = 1;
	public static final int SECURITY_PSK = 2;
	public static final int SECURITY_EAP = 3;
	
	public String ssid;
	public String bssid;
	public int security;
	public int networkId;
	boolean wpsAvailable = false;
	
	PskType pskType = PskType.UNKNOWN;
	public WifiConfiguration mConfig;
	ScanResult mScanResult;
	
	private int mRssi;
	private WifiInfo mInfo;
	private DetailedState mState;
	
	static int getSecurity(WifiConfiguration config) {
		if (config.allowedKeyManagement.get(KeyMgmt.WPA_PSK)) {
			return SECURITY_PSK;
		}
		
		if (config.allowedKeyManagement.get(KeyMgmt.WPA_EAP)) {
			return SECURITY_EAP;
		}
		
		return (config.wepKeys[0] != null) ? SECURITY_WEP : SECURITY_NONE;
	}
	
	private static int getSecurity(ScanResult result) {
		if (result.capabilities.contains("WEP")) {
			return SECURITY_WEP;
		} else if (result.capabilities.contains("PSK")) {
			return SECURITY_PSK;
		} else if (result.capabilities.contains("EAP")) {
			return SECURITY_EAP;
		}
		return SECURITY_NONE;
	}
	
	
	public String getSecurityString() {
		switch (security) {
		case SECURITY_EAP:
			return "EAP";
		case SECURITY_PSK:
			switch (pskType) {
			case WPA:
				return "WPA PSK";
			case WPA2:
				return "WPA2 PSK";
			case WPA_WPA2:
				return "WPA/WPA2 PSK";
			case UNKNOWN:
			default:
				return "WPA/WPA2 PSK";
			}
		case SECURITY_WEP:
			return "WEP";
		case SECURITY_NONE:
		default:
			return "None";
		}
	}
	
	private static PskType getPskType(ScanResult result) {
		boolean wpa = result.capabilities.contains("WPA-PSK");
		boolean wpa2 = result.capabilities.contains("WPA2-PSK");
		
		if (wpa2 && wpa) {
			return PskType.WPA_WPA2;
		} else if (wpa2) {
			return PskType.WPA2;
		} else if (wpa) {
			return PskType.WPA;
		} else {
			return PskType.UNKNOWN;
		}
	}
	
    public AccessPoint(WifiConfiguration config) {
        loadConfig(config);
    }
    
    public AccessPoint(ScanResult result) {
        loadResult(result);
    }
    
	
	private void loadConfig(WifiConfiguration config) {
	    ssid = (config.SSID == null ? "" : removeDoubleQuotes(config.SSID));
	    bssid = config.BSSID;
	    security = getSecurity(config);
	    networkId = config.networkId;
	    mRssi = Integer.MAX_VALUE;
	    mConfig = config;
	}
	
    private void loadResult(ScanResult result) {
        ssid = result.SSID;
        bssid = result.BSSID;
        security = getSecurity(result);
        wpsAvailable = security != SECURITY_EAP && result.capabilities.contains("WPS");
        if (security == SECURITY_PSK)
            pskType = getPskType(result);
        networkId = -1;
        mRssi = result.level;
        mScanResult = result;
    }
    
    public int compareTo(AccessPoint accessPoint) {
    	if (!(accessPoint instanceof AccessPoint)) {
            return 1;
        }
        AccessPoint other = (AccessPoint) accessPoint;
        // Active one goes first.
        if (mInfo != null && other.mInfo == null) return -1;
        if (mInfo == null && other.mInfo != null) return 1;

        // Reachable one goes before unreachable one.
        if (mRssi != Integer.MAX_VALUE && other.mRssi == Integer.MAX_VALUE) return -1;
        if (mRssi == Integer.MAX_VALUE && other.mRssi != Integer.MAX_VALUE) return 1;

        // Configured one goes before unconfigured one.
        if (networkId != -1 && other.networkId == -1) return -1;
        if (networkId == -1 && other.networkId != -1) return 1;

        // Sort by signal strength.
        int difference = WifiManager.compareSignalLevel(other.mRssi, mRssi);
        if (difference != 0) {
            return difference;
        }
        // Sort by ssid.
        return ssid.compareToIgnoreCase(other.ssid);
    }
    
    @Override
    public boolean equals(Object other) {
        if (!(other instanceof AccessPoint)) return false;
        return (this.compareTo((AccessPoint) other) == 0);
    }
    
    @Override
    public int hashCode() {
        int result = 0;
        if (mInfo != null) result += 13 * mInfo.hashCode();
        result += 19 * mRssi;
        result += 23 * networkId;
        result += 29 * ssid.hashCode();
        return result;
    }
    
    public boolean update(ScanResult result) {
        if (ssid.equals(result.SSID) && security == getSecurity(result)) {
            if (WifiManager.compareSignalLevel(result.level, mRssi) > 0) {
                int oldLevel = getLevel();
                mRssi = result.level;
            }
            // This flag only comes from scans, is not easily saved in config
            if (security == SECURITY_PSK) {
                pskType = getPskType(result);
            }
            return true;
        }
        return false;
    }
    
    public void update(WifiInfo info, DetailedState state) {
        if (info != null && networkId != -1 && networkId == info.getNetworkId()) {
            mRssi = info.getRssi();
            mInfo = info;
            mState = state;
        } else if (mInfo != null) {
            mInfo = null;
            mState = null;
        }
    }
    
    public int getLevel() {
        if (mRssi == Integer.MAX_VALUE) {
            return -1;
        }
        return WifiManager.calculateSignalLevel(mRssi, 4);
    }
    
    public WifiConfiguration getConfig() {
        return mConfig;
    }

    public WifiInfo getInfo() {
        return mInfo;
    }

    public DetailedState getState() {
        return mState;
    }
    
    public static String convertToQuotedString(String string) {
        return "\"" + string + "\"";
    }
	
	public static String removeDoubleQuotes(String string) {
		int length = string.length();
		if ((length > 1) && (string.charAt(0) == '"')
				&& (string.charAt(length - 1) == '"')) {
			return string.substring(1, length - 1);
		}
		return string;
	}
	
	protected void generateOpenNetworkConfig() {
        if (security != SECURITY_NONE)
            throw new IllegalStateException();
        if (mConfig != null)
            return;
        mConfig = new WifiConfiguration();
        mConfig.SSID = AccessPoint.convertToQuotedString(ssid);
        mConfig.allowedKeyManagement.set(KeyMgmt.NONE);
    }
}
