package com.rokid.rkcommonlibrary.mediaplayer;
import android.content.Context;
import android.content.res.AssetFileDescriptor;
import android.media.MediaPlayer;
import com.rokid.rkcommonlibrary.utils.RKLogUtil;
import java.io.IOException;
/**
 * Created by Bassam on 16/8/8.
 */
public class RKMediaPlayer {
    private float mVolume = 1.0f;//初始化音量
    private float mVolumeRate = 1.0f;//音量调节权重
    private Context mContext;
    private RKMediaDataBean mediaDataBean;
    private MediaPlayer mMediaPlayer;
    private boolean prepared = false;
    private boolean canPlay = false;
    private boolean mIsStarted = false;
    private RKMediaPlayCallback rkMediaPlayCallback;
    public RKMediaPlayer(Context context, RKMediaDataBean mediaDataBean, RKMediaPlayCallback
            rkMediaPlayCallback) {
        this.mContext = context;
        this.mediaDataBean = mediaDataBean;
        this.rkMediaPlayCallback = rkMediaPlayCallback;
    }

    /**
     * 开始
     */
    public boolean start() {
        canPlay = true;
        if (prepare()) {
            if (mMediaPlayer == null) {
                return false;
            }
            if (canPlay && prepared) {
                mMediaPlayer.start();
                mIsStarted = true;
            }
            return true;
        }
        return false;
    }

    /**
     * 继续
     */
    public boolean resume() {
        canPlay = true;
        if (prepare()) {
            if (mMediaPlayer == null) {
                return false;
            }
            if (canPlay && prepared) {
                mMediaPlayer.start();
                mIsStarted = true;
            }
            return true;
        }
        return false;
    }

    /**
     * 重新开始
     */
    public boolean restart() {
        stop();
        return start();
    }

    /**
     * 暂停
     */
    public void pause() {
        canPlay = false;
        mIsStarted = false;
        if (mMediaPlayer == null)
            return;
        mMediaPlayer.pause();
    }

    /**
     * 结束
     */
    public void stop() {
        canPlay = false;
        mIsStarted = false;
        if (mMediaPlayer == null)
            return;
        mMediaPlayer.stop();
        mMediaPlayer.release();
        mMediaPlayer = null;
    }

    /**
     * 设置音量
     *
     * @param volume
     */
    public void setVolume(float volume) {
        mVolume = volume;
        updateVolume();
    }

    /**
     * 获得音量
     *
     * @return
     */
    public float getVolume() {
        return mVolume;
    }

    /**
     * 设置音量变化度
     *
     * @param volumeRate
     */
    public void setVolumeRate(float volumeRate) {
        mVolumeRate = volumeRate;
        updateVolume();
    }

    /**
     * 获得音量变化度
     *
     * @return
     */
    public float getVolumeRate() {
        return mVolumeRate;
    }

    private void updateVolume() {
        if (mMediaPlayer == null)
            return;
        float volume = mVolume * mVolumeRate;
        mMediaPlayer.setVolume(volume, volume);
    }

    private boolean prepare() {
        if (mediaDataBean == null || !mediaDataBean.checkData()) {
            RKLogUtil.e("MediaDataBean is Wrong");
            return false;
        }
        if (mMediaPlayer != null) {
            return true;
        }
        try {
            prepared = false;
            if (mediaDataBean.getFileSourceType() == RKMediaDataBean.FILE_SOURCE_TYPE_ASSET) {
                if (mContext == null) {
                    RKLogUtil.e("mContext is null");
                    return false;
                }
                mMediaPlayer = new MediaPlayer();
                AssetFileDescriptor fileDescriptor = mContext.getAssets().openFd(mediaDataBean
                        .getFileName());
                mMediaPlayer.setDataSource(fileDescriptor.getFileDescriptor());
            } else if (mediaDataBean.getFileSourceType() == RKMediaDataBean.FILE_SOURCE_TYPE_PATH) {
                mMediaPlayer = new MediaPlayer();
                mMediaPlayer.setDataSource(mediaDataBean.getFilePath());
            } else if (mediaDataBean.getFileSourceType() == RKMediaDataBean.FILE_SOURCE_TYPE_FD) {
                mMediaPlayer = new MediaPlayer();
                mMediaPlayer.setDataSource(mediaDataBean.getFd());
            } else if (mediaDataBean.getFileSourceType() == RKMediaDataBean.FILE_SOURCE_TYPE_RAW) {
                if (mContext == null) {
                    RKLogUtil.e("mContext is null");
                    return false;
                }
                mMediaPlayer = MediaPlayer.create(mContext, mediaDataBean.getFileId());
            } else if (mediaDataBean.getFileSourceType() == RKMediaDataBean.FILE_SOURCE_TYPE_URL) {
                mMediaPlayer = new MediaPlayer();
                mMediaPlayer.setDataSource(mediaDataBean.getFileUrl());
            }
            mMediaPlayer.setLooping(mediaDataBean.isLoop());
            mMediaPlayer.setOnBufferingUpdateListener(new MediaPlayer.OnBufferingUpdateListener() {
                @Override
                public void onBufferingUpdate(MediaPlayer mp, int percent) {
                    RKLogUtil.i("onBufferingUpdate:" + percent + "");
                    if (rkMediaPlayCallback != null) {
                        rkMediaPlayCallback.onBufferingUpdate(mediaDataBean, mp, percent);
                    }
                }
            });
            mMediaPlayer.setOnCompletionListener(new MediaPlayer.OnCompletionListener() {
                @Override
                public void onCompletion(MediaPlayer mp) {
                    RKLogUtil.i("onCompletion");
                    if (rkMediaPlayCallback != null) {
                        rkMediaPlayCallback.onCompletion(mediaDataBean, mp);
                    }
                }
            });
            mMediaPlayer.setOnErrorListener(new MediaPlayer.OnErrorListener() {
                @Override
                public boolean onError(MediaPlayer mp, int what, int extra) {
                    RKLogUtil.i("onError:" + "what=" + what + ";extra=" + extra);
                    if (rkMediaPlayCallback != null) {
                        rkMediaPlayCallback.onError(mediaDataBean, mp, what, extra);
                    }
                    return false;
                }
            });
            mMediaPlayer.setOnInfoListener(new MediaPlayer.OnInfoListener() {
                @Override
                public boolean onInfo(MediaPlayer mp, int what, int extra) {
                    RKLogUtil.i("onInfo:what=" + what + ";extra=" + extra);
                    if (rkMediaPlayCallback != null) {
                        rkMediaPlayCallback.onInfo(mediaDataBean, mp, what, extra);
                    }
                    return false;
                }
            });
            mMediaPlayer.setOnSeekCompleteListener(new MediaPlayer.OnSeekCompleteListener() {
                @Override
                public void onSeekComplete(MediaPlayer mp) {
                    RKLogUtil.i("onSeekComplete");
                    if (rkMediaPlayCallback != null) {
                        rkMediaPlayCallback.onSeekComplete(mediaDataBean, mp);
                    }
                }
            });
            mMediaPlayer.setOnPreparedListener(new MediaPlayer.OnPreparedListener() {
                @Override
                public void onPrepared(MediaPlayer mp) {
                    prepared = true;
                    if (canPlay && mediaDataBean.getFileSourceType() == RKMediaDataBean
                            .FILE_SOURCE_TYPE_URL) {
                        mMediaPlayer.start();
                    }
                    if (rkMediaPlayCallback != null) {
                        rkMediaPlayCallback.onPrepared(mediaDataBean, mp);
                    }
                }
            });
            if (mediaDataBean.getFileSourceType() == RKMediaDataBean.FILE_SOURCE_TYPE_URL) {
                mMediaPlayer.prepareAsync();
            } else {
                mMediaPlayer.prepare();
                prepared = true;
            }
        } catch (IOException e) {
            e.printStackTrace();
            mMediaPlayer = null;
            return false;
        }
        setVolume(mVolume);
        return true;
    }
    public void setRkMediaPlayCallback(RKMediaPlayCallback rkMediaPlayCallback) {
        this.rkMediaPlayCallback = rkMediaPlayCallback;
    }
    public boolean ismIsStarted() {
        return mIsStarted;
    }
}
