package com.example.networkconnect;

import java.util.concurrent.atomic.AtomicBoolean;

import android.app.Service;
import android.content.Context;
import android.content.Intent;
import android.net.NetworkInfo;
import android.net.NetworkInfo.DetailedState;
import android.net.wifi.SupplicantState;
import android.net.wifi.WifiInfo;
import android.net.wifi.WifiManager;
import android.os.Binder;
import android.os.Handler;
import android.os.IBinder;
import android.util.Log;

public class RKWifiManagerService extends Service {

	public static final int MESSAGE_WIFI_STATE_CHANGED = 0;
	public static final int MESSAGE_STOP_SCAN = 1;
	public static final int MESSAGE_SCAN_COMPLETE = 2;
	public static final int MESSAGE_UPDATE_NETWORK_INFO = 3;
	public static final int MESSAGE_UPDATE_ACCESS_POINTS = 4;
	public static final int MESSAGE_RSSI_CHANGED =5;
	public static final int MESSAGE_SUPPLICANT_STATE_CHANGED = 6;
	public static final int MESSAGE_STATE_SCAN = 7;
	Handler mHandler = new Handler() {
		public void handleMessage(android.os.Message msg) {
			switch (msg.what) {
			case MESSAGE_WIFI_STATE_CHANGED:
				updateWifiState(msg.arg1);
				break;
			case MESSAGE_STOP_SCAN:
				mWifiScanner.stopScan();
				break;
			case MESSAGE_SCAN_COMPLETE:
				mWifiConnectHelper.updateAccessPoints();
				break;
			case MESSAGE_UPDATE_NETWORK_INFO:
				updateNetworkInfo((NetworkInfo) msg.obj);
				break;
			case MESSAGE_UPDATE_ACCESS_POINTS:
				mWifiConnectHelper.updateAccessPoints();
			case MESSAGE_SUPPLICANT_STATE_CHANGED:
				supplicantStateChanaged(msg.arg1, (SupplicantState) msg.obj);
				break;
			case MESSAGE_RSSI_CHANGED:
				updateNetworkInfo();
				break;
			case MESSAGE_STATE_SCAN:
				mWifiScanner.run();
				break;
			}
		}
	};
	private final AtomicBoolean mConnected = new AtomicBoolean(false);
	private WifiManager mWifiManager;
	private RKWifiScanner mWifiScanner;
	private RKWifiConnectHelper mWifiConnectHelper;
	private WifiInfo lastInfo;
	private NetworkInfo mLastNetworkInfo;
	private static boolean connecting;

	@Override
	public void onCreate() {
		super.onCreate();
		mWifiManager = (WifiManager) getApplicationContext().getSystemService(
				Context.WIFI_SERVICE);
		new RKWifiReceiver().registReceiver(getApplicationContext(), mHandler);
		mWifiScanner = new RKWifiScanner(mWifiManager, mHandler);
		mWifiConnectHelper = new RKWifiConnectHelper(mHandler, mWifiManager);
		if (!mWifiManager.isWifiEnabled()) {
			mWifiManager.setWifiEnabled(true);
		} else {
			mWifiScanner.startScan();
		}
	}

	protected void updateWifiState(int arg1) {
		if (WifiManager.WIFI_STATE_ENABLED == arg1) {
			if (mWifiScanner != null) {
				mWifiScanner.startScan();
			}
		} else {
			lastInfo = null;
			mLastNetworkInfo = null;
			if (mWifiScanner != null) {
				mWifiScanner.stopScan();
			}
		}
	}
	
	private void updateNetworkInfo() {
		
	}

	protected void supplicantStateChanaged(int arg1, SupplicantState obj) {
		if(arg1 == WifiManager.ERROR_AUTHENTICATING && obj == SupplicantState.DISCONNECTED){
			if(connecting){
				
			}else{
				mWifiScanner.startScan();
			}
		}
	}

	protected void updateNetworkInfo(NetworkInfo mInfo) {
		if (mInfo != null) {
			connecting = mInfo.isConnectedOrConnecting();
			DetailedState detailedState = mInfo.getDetailedState();
			if (detailedState == DetailedState.OBTAINING_IPADDR) {
				mWifiScanner.stopScan();
			}
		}
		mConnected.set(mInfo.isConnected());
		mWifiConnectHelper.updateNetworkInfo(mInfo);
	}

	@Override
	public IBinder onBind(Intent intent) {
		mWifiConnectHelper.registCallback(callback);
		return new RKWifiManagerStub();
	}
	
	IRKWifiConnectCallback callback = new IRKWifiConnectCallback() {
		
		@Override
		public void ssidNotFind() {
			Log.e("dx", "ssidNotFind");
		}
		
		@Override
		public void pwdError() {
			Log.e("dx", "pwdError");
		}
		
		@Override
		public void disconnected() {
			Log.e("dx", "disconnected");
		}
		
		@Override
		public void connected() {
			Log.e("dx", "connected");
		}
	};

	class RKWifiManagerStub extends Binder implements IRKWifiManager {

		@Override
		public boolean connect(String ssid, String pwd) {
			boolean connect = mWifiConnectHelper.connect(ssid, pwd);
			if(connect){
				connecting = true;
			}
			return connect;
		}

		@Override
		public boolean disconnect() {
			mWifiConnectHelper.disconnect();
			return false;
		}

		@Override
		public boolean isConnected() {
			return mConnected.get();
		}
	};
}
