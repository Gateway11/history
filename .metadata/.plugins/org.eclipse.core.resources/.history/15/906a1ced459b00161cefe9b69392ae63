package com.rokid.rksettings;

import java.util.HashMap;

import com.rokid.rksettings.base.SettingsBase;
import com.rokid.rksettings.nlp.AccountSettings;
import com.rokid.rksettings.nlp.BluetoothSettings;
import com.rokid.rksettings.nlp.MiscSettings;
import com.rokid.rksettings.nlp.PowerSettings;
//import com.rokid.rksettings.nlp.WifiSettings;

import android.R.integer;
import android.os.IBinder;
import android.os.Parcel;
import android.util.Log;

public class SettingsMapper {
	private HashMap<String, SettingsBase> mNLPDispatchMap = new HashMap<String, SettingsBase>();
	private HashMap<Integer, SettingsBase> mMessageDispatchMap = new HashMap<Integer, SettingsBase>();
	
	AccountSettings accountSettings;
	BluetoothSettings bluetoothSettings;
	MiscSettings miscSettings;
	PowerSettings powerSettings;
	//WifiSettings wifiSettings;
	
	private RKSettingsServices mainServices;
	
	private static final String TAG = "SettingsNLPMapper";
	public static final String DOMAIN_SETTING_STRING = "com.rokid.system.settings";
	//account
	public static final String INTENT_UNBIND_MASTER_STRING = "unbind_master";
	public static final String INTENT_ENABLE_SAND_BOX_STRING = "enable_sandbox";
	public static final String INTENT_DISABLE_SAND_BOX_STRING = "disable_sandbox";
	//misc
	public static final String INTENT_ERASE_DATA_STRING = "erase_data";
	public static final String INTENT_CONFIRM_ERASE_DATA_STRING = "confirm_erase_data";
	public static final String INTENT_CHANGE_LANGUAGE_STRING = "change_language";
	public static final String INTENT_GET_LANGUAGE_STRING = "get_language";
	public static final String INTENT_GET_BASIC_INFO_STRING = "get_basic_info";
	
	//wifi
	public static final String INTENT_DISCONNECT_NETWORK_STRING = "disconnect_network";
	
	//bt
	public static final String INTENT_ENABLE_BLUETOOTH_STRING = "openbluetooth";
	public static final String INTENT_DISABLE_BLUETOOTH_STRING = "disablebluetooth";
	public static final String INTENT_BLUETOOTH_IS_ENABLE_STRING = "isbluetoothenable";
	
	public static final String DOMAIN_POWER_SETTING_STRING = "com.rokid.system.power";
	//power
	public static final String INTENT_BATTERY_CHARGING_STRING = "battery_charging";
	public static final String INTENT_BATTERY_LEVEL_STRING = "battery_level";
	public static final String INTENT_BATTERY_USETIME_STRING = "battery_usetime";
	
	
	public SettingsMapper(RKSettingsServices mainServices) {
		this.mainServices = mainServices;
	}
	
	private String buildKeyString(String a, String b) {
		return a + "_" + b;
	}
	
	public void init() {
		//create kinds of settings
		createAndInitSettings();
		
		mNLPDispatchMap.put(buildKeyString(DOMAIN_SETTING_STRING, INTENT_UNBIND_MASTER_STRING), accountSettings);
		mNLPDispatchMap.put(buildKeyString(DOMAIN_SETTING_STRING, INTENT_ENABLE_SAND_BOX_STRING), accountSettings);
		mNLPDispatchMap.put(buildKeyString(DOMAIN_SETTING_STRING, INTENT_DISABLE_SAND_BOX_STRING), accountSettings);
		
		mNLPDispatchMap.put(buildKeyString(DOMAIN_SETTING_STRING, INTENT_ERASE_DATA_STRING), miscSettings);
		mNLPDispatchMap.put(buildKeyString(DOMAIN_SETTING_STRING, INTENT_CONFIRM_ERASE_DATA_STRING), miscSettings);
		mNLPDispatchMap.put(buildKeyString(DOMAIN_SETTING_STRING, INTENT_CHANGE_LANGUAGE_STRING), miscSettings);
		mNLPDispatchMap.put(buildKeyString(DOMAIN_SETTING_STRING, INTENT_GET_LANGUAGE_STRING), miscSettings);
		mNLPDispatchMap.put(buildKeyString(DOMAIN_SETTING_STRING, INTENT_GET_BASIC_INFO_STRING), miscSettings);
		
		//mNLPDispatchMap.put(buildKeyString(DOMAIN_SETTING_STRING, INTENT_DISCONNECT_NETWORK_STRING),wifiSettings);
		
		mNLPDispatchMap.put(buildKeyString(DOMAIN_SETTING_STRING, INTENT_ENABLE_BLUETOOTH_STRING), bluetoothSettings);
		mNLPDispatchMap.put(buildKeyString(DOMAIN_SETTING_STRING, INTENT_DISABLE_BLUETOOTH_STRING), bluetoothSettings);
		mNLPDispatchMap.put(buildKeyString(DOMAIN_SETTING_STRING, INTENT_BLUETOOTH_IS_ENABLE_STRING), bluetoothSettings);
		
		mNLPDispatchMap.put(buildKeyString(DOMAIN_POWER_SETTING_STRING, INTENT_BATTERY_CHARGING_STRING),powerSettings);
		mNLPDispatchMap.put(buildKeyString(DOMAIN_POWER_SETTING_STRING, INTENT_BATTERY_LEVEL_STRING),powerSettings);
		mNLPDispatchMap.put(buildKeyString(DOMAIN_POWER_SETTING_STRING, INTENT_BATTERY_USETIME_STRING),powerSettings);
	}
	

	public void dispatchNLP(String domain, String intent, String nlp) {
		String key = buildKeyString(domain, intent);
		SettingsBase base = null;
		if ((base = mNLPDispatchMap.get(key)) == null) {
			Log.w(TAG, "cannot find entry for domain " + domain + " intent " + intent + " nlp: " + nlp);
			return;
		}
		
		base.handleNLP(intent, nlp);
	}
	
	private void createAndInitSettings() {
		accountSettings = new AccountSettings(mainServices);
		bluetoothSettings = new BluetoothSettings(mainServices);
		miscSettings = new MiscSettings(mainServices);
		powerSettings = new PowerSettings(mainServices);
		//wifiSettings = new WifiSettings(mainServices);
	}

	public void callMustServices() {
	}
}
